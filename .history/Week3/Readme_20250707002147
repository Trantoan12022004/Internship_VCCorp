# 💬 WebSocket Chat Application

Ứng dụng chat thời gian thực sử dụng WebSocket với Node.js, Express và vanilla JavaScript.

## 🌟 Tính năng

### ✅ Chức năng cơ bản
- **Real-time messaging**: Tin nhắn được gửi và nhận ngay lập tức
- **User management**: Quản lý danh sách người dùng online
- **Message history**: Hiển thị 10 tin nhắn gần nhất khi vào chat
- **Connection status**: Hiển thị trạng thái kết nối (Online/Offline)
- **User validation**: Kiểm tra tên người dùng (không trùng, độ dài hợp lệ)

### ✅ Tính năng nâng cao
- **Typing indicators**: Hiển thị khi người dùng đang nhập tin nhắn
- **Auto-reconnection**: Tự động kết nối lại khi bị ngắt (tối đa 5 lần)
- **Sound notifications**: Âm thanh thông báo khi có tin nhắn mới
- **Settings panel**: Tùy chỉnh âm thanh và hiển thị thời gian
- **Character counter**: Đếm ký tự tin nhắn (giới hạn 500 ký tự)
- **Responsive design**: Giao diện thích ứng với mobile

### ✅ API Endpoints
- `GET /api/status`: Thông tin trạng thái server
- `GET /api/users`: Danh sách người dùng online
- `WebSocket /`: Kết nối chat real-time

## 🛠️ Cài đặt

### Yêu cầu hệ thống
- **Node.js**: >= 14.0.0
- **npm**: >= 6.0.0
- **Trình duyệt**: Chrome, Firefox, Safari, Edge (hỗ trợ WebSocket)

### Bước 1: Clone hoặc tải dự án
```bash
# Nếu có Git
git clone <repository-url>
cd web_socket

# Hoặc tải và giải nén file ZIP
```

### Bước 2: Cài đặt dependencies
```bash
npm install
```

### Bước 3: Chạy ứng dụng

#### Development mode (tự động restart khi code thay đổi)
```bash
npm run dev
```

#### Production mode
```bash
npm start
```

### Bước 4: Truy cập ứng dụng
Mở trình duyệt và truy cập:
- **Chat App**: http://localhost:3000
- **Server Status**: http://localhost:3000/api/status
- **Users List**: http://localhost:3000/api/users

## 📁 Cấu trúc dự án

```
web_socket/
├── server.js              # WebSocket server chính
├── package.json           # Dependencies và scripts
├── README.md             # Hướng dẫn này
├── .gitignore            # File gitignore
└── public/               # Frontend files
    ├── index.html        # Giao diện chính
    ├── script.js         # JavaScript client
    └── style.css         # CSS styling
```

## 🚀 Cách sử dụng

### 1. Tham gia chat
- Nhập tên của bạn (tối đa 20 ký tự)
- Click "Tham gia Chat"

### 2. Gửi tin nhắn
- Nhập tin nhắn vào ô chat (tối đa 500 ký tự)
- Nhấn Enter hoặc click nút gửi

### 3. Xem người dùng online
- Danh sách người dùng hiển thị ở sidebar bên trái
- Số lượng người online hiển thị ở header

### 4. Cài đặt
- Click nút ⚙️ ở góc phải header
- Tùy chỉnh âm thanh thông báo và hiển thị thời gian

## 🧪 Test ứng dụng

### Test cơ bản
```bash
# Kiểm tra server status
curl http://localhost:3000/api/status

# Kiểm tra danh sách users
curl http://localhost:3000/api/users
```

### Test multi-user
1. Mở nhiều tab trình duyệt
2. Tham gia với tên khác nhau
3. Gửi tin nhắn giữa các tab
4. Kiểm tra typing indicator

### Test reconnection
1. Tắt server (Ctrl+C)
2. Khởi động lại server
3. Kiểm tra client tự động reconnect

## 🔧 Cấu hình

### Thay đổi port
```javascript
// Trong server.js
const PORT = process.env.PORT || 3000; // Thay đổi 3000 thành port mong muốn
```

### Thay đổi giới hạn tin nhắn
```javascript
// Trong server.js - function handleChatMessage
if (message.length > 500) { // Thay đổi 500 thành giới hạn mong muốn
```

### Thay đổi số lượng tin nhắn lịch sử
```javascript
// Trong server.js
const recentMessages = messageHistory.slice(-10); // Thay đổi -10 thành số lượng mong muốn
```

## 📦 Dependencies

### Production
- **express**: ^4.18.2 - Web framework
- **ws**: ^8.14.2 - WebSocket library

### Development
- **nodemon**: ^3.0.1 - Auto-restart server

## 🐛 Troubleshooting

### Lỗi "Cannot find module"
```bash
# Xóa node_modules và cài đặt lại
rm -rf node_modules package-lock.json
npm install
```

### Lỗi "Port already in use"
```bash
# Windows - Tìm và kill process đang sử dụng port
netstat -ano | findstr :3000
taskkill /PID <PID> /F

# Hoặc thay đổi port trong server.js
```

### WebSocket connection failed
- Kiểm tra firewall/antivirus
- Đảm bảo không có proxy chặn WebSocket
- Thử trình duyệt khác

### Tin nhắn không hiển thị
- Mở Developer Tools (F12)
- Kiểm tra Console có lỗi không
- Kiểm tra Network tab có kết nối WebSocket

## 🔒 Bảo mật

### Hiện tại đã implement
- **HTML escaping**: Tránh XSS attacks
- **Input validation**: Kiểm tra độ dài tin nhắn và tên
- **Connection cleanup**: Dọn dẹp kết nối inactive

### Cần cải thiện cho production
- Rate limiting
- User authentication
- Message encryption
- Input sanitization nâng cao

## 📈 Mở rộng

### Tính năng có thể thêm
- Database integration (MongoDB, PostgreSQL)
- User authentication/authorization
- Private messaging
- File/image sharing
- Multiple chat rooms
- Message reactions/emoji
- Admin panel
- Mobile app

### Scaling
- Redis cho session management
- Load balancer cho multiple instances
- CDN cho static files
- Message queue (RabbitMQ, Kafka)

## 🤝 Đóng góp

1. Fork dự án
2. Tạo feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit changes (`git commit -m 'Add some AmazingFeature'`)
4. Push branch (`git push origin feature/AmazingFeature`)
5. Tạo Pull Request

## 📄 License

Dự án này sử dụng MIT License.

## 📞 Hỗ trợ

Nếu gặp vấn đề, vui lòng:
1. Kiểm tra phần Troubleshooting
2. Tạo issue trên GitHub
3. Liên hệ developer

## 📸 Screenshots

### Giao diện đăng nhập
![Login Interface](screenshots/login.png)

### Giao diện chat
![Chat Interface](screenshots/chat.png)

### Panel cài đặt
![Settings Panel](screenshots/settings.png)

---

**Phát triển bởi**: [Tên của bạn]  
**Phiên bản**: 1.0.0  
**Ngày cập nhật**: 2025-01-07

## 🎯 Demo

Xem demo trực tuyến tại: [Demo Link]

## 🚀 Quick Start

```bash
# Clone và chạy nhanh
git clone <repository-url>
cd web_socket
npm install
npm start

# Mở trình duyệt: http://localhost:3000
```

## 🔍 Tính năng chi tiết

### WebSocket Events
- `connection`: Khi client kết nối
- `message`: Nhận tin nhắn từ client
- `close`: Khi client ngắt kết nối
- `error`: Xử lý lỗi kết nối

### Message Types
- `setUsername`: Đặt tên người dùng
- `message`: Gửi tin nhắn chat
- `typing`: Trạng thái đang nhập
- `ping/pong`: Heartbeat connection

### Client Features
- Automatic reconnection with exponential backoff
- Typing indicators with timeout
- Sound notifications (optional)
- Message validation and sanitization
- Responsive design for mobile devices