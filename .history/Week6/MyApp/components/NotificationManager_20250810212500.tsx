import { useEffect, useState, useCallback } from 'react';
import { Alert } from 'react-native';
import { getNotifications, toggleTaskComplete } from '../sevices/api';

interface TaskNotification {
    taskId: string;
    title: string;
    taskTime: string;
    notificationTime: string;
    isActive: boolean;
    timeToNotification: string;
}

interface NotificationManagerProps {
    onTaskReminder?: (notification: TaskNotification) => void;
}

export default function NotificationManager({ onTaskReminder }: NotificationManagerProps) {
    const [notifications, setNotifications] = useState<TaskNotification[]>([]);
    const [checkedNotifications, setCheckedNotifications] = useState<Set<string>>(new Set());

    // Fetch notifications t·ª´ server
    const fetchNotifications = async () => {
        try {
            const response = await getNotifications();
            if (response.data.success) {
                setNotifications(response.data.data);
                console.log(`üì± Fetched ${response.data.data.length} notifications`);
            }
        } catch (error) {
            console.error('Error fetching notifications:', error);
        }
    };

    // Ki·ªÉm tra notifications c·∫ßn trigger
    const checkNotifications = useCallback(() => {
        const now = new Date();
        
        notifications.forEach(notification => {
            // Skip n·∫øu ƒë√£ check notification n√†y r·ªìi
            if (checkedNotifications.has(notification.taskId)) {
                return;
            }

            // Parse notification time
            const notificationTime = new Date(notification.notificationTime);
            
            // Ki·ªÉm tra xem ƒë√£ ƒë·∫øn gi·ªù notification ch∆∞a (v·ªõi buffer 1 ph√∫t)
            const timeDiff = notificationTime.getTime() - now.getTime();
            const isTimeToNotify = timeDiff <= 60000 && timeDiff >= -60000; // ¬±1 ph√∫t
            
            if (isTimeToNotify && notification.isActive) {
                showTaskReminder(notification);
                
                // ƒê√°nh d·∫•u ƒë√£ check
                setCheckedNotifications(prev => new Set([...prev, notification.taskId]));
                
                console.log(`üîî Notification triggered for task: ${notification.title}`);
            }
        });
    }, [notifications, checkedNotifications]);

    // Hi·ªÉn th·ªã notification alert
    const showTaskReminder = (notification: TaskNotification) => {
        const message = `Task "${notification.title}" s·∫Ω b·∫Øt ƒë·∫ßu trong 15 ph√∫t!\n\nTh·ªùi gian: ${notification.taskTime}`;
        
        Alert.alert(
            "üîî Nh·∫Øc nh·ªü Task",
            message,
            [
                {
                    text: "ƒê·ªÉ sau",
                    style: "cancel"
                },
                {
                    text: "Xem chi ti·∫øt",
                    onPress: () => {
                        if (onTaskReminder) {
                            onTaskReminder(notification);
                        }
                        console.log("Navigate to task:", notification.taskId);
                    }
                },
                {
                    text: "ƒê√°nh d·∫•u ho√†n th√†nh",
                    onPress: () => {
                        handleMarkComplete(notification.taskId);
                    }
                }
            ],
            { cancelable: false }
        );
    };

    // ƒê√°nh d·∫•u task ho√†n th√†nh
    const handleMarkComplete = async (taskId: string) => {
        try {
            // Import toggleTaskComplete t·ª´ api
            const { toggleTaskComplete } = require('../sevices/api');
            const response = await toggleTaskComplete(taskId);
            
            if (response.data.success) {
                Alert.alert("Th√†nh c√¥ng", "Task ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh!");
                // Refresh notifications
                fetchNotifications();
            }
        } catch (error) {
            console.error('Error marking task complete:', error);
            Alert.alert("L·ªói", "Kh√¥ng th·ªÉ ƒë√°nh d·∫•u task ho√†n th√†nh");
        }
    };

    // Effect ƒë·ªÉ fetch notifications ƒë·ªãnh k·ª≥
    useEffect(() => {
        // Fetch ngay l·∫≠p t·ª©c
        fetchNotifications();

        // Set up interval ƒë·ªÉ fetch notifications m·ªói 30 gi√¢y
        const fetchInterval = setInterval(fetchNotifications, 30000);

        return () => {
            clearInterval(fetchInterval);
        };
    }, []);

    // Effect ƒë·ªÉ check notifications m·ªói 10 gi√¢y
    useEffect(() => {
        const checkInterval = setInterval(checkNotifications, 10000);

        return () => {
            clearInterval(checkInterval);
        };
    }, [notifications, checkedNotifications]);

    // Reset checked notifications khi notifications list thay ƒë·ªïi
    useEffect(() => {
        setCheckedNotifications(new Set());
    }, [notifications.length]);

    // Component n√†y kh√¥ng render g√¨, ch·ªâ x·ª≠ l√Ω logic
    return null;
}

// Export types ƒë·ªÉ s·ª≠ d·ª•ng ·ªü components kh√°c
export type { TaskNotification };
