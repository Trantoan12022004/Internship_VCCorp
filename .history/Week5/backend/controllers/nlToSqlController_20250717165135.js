const asyncHandler = require("express-async-handler");
const dotenv = require("dotenv");
dotenv.config();

// S·ª≠ d·ª•ng API m·ªõi c·ªßa Google
const { GoogleGenAI } = require("@google/genai");

// Ki·ªÉm tra API key
if (!process.env.GEMINI_API_KEY) {
    console.error("‚ùå GEMINI_API_KEY kh√¥ng t·ªìn t·∫°i trong file .env!");
    process.exit(1);
}

console.log("‚úÖ API key found:", process.env.GEMINI_API_KEY.substring(0, 10) + "...");

// Kh·ªüi t·∫°o client
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
console.log("üöÄ Google GenAI client initialized");

// @desc    Test k·∫øt n·ªëi Gemini API
// @route   GET /api/nlsql/test
// @access  Public
const testGeminiConnection = asyncHandler(async (req, res) => {
    try {
        console.log("üîÑ Testing Gemini API connection...");
        
        // Test v·ªõi model gemini-2.5-pro (t·ª´ k·∫øt qu·∫£ Python test)
        const response = await ai.models.generateContent({
            model: "gemini-2.5-pro",
            contents: "t·∫°o m·ªôt c√¢u"
        });

        console.log("‚úÖ Response received from Gemini");
        console.log("üìÑ Full response:", response);

        return res.status(200).json({
            success: true,
            message: "üéâ Gemini API ho·∫°t ƒë·ªông t·ªët!",
            response: response.text || response,
            model: "gemini-2.5-pro",
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error("‚ùå Gemini API test failed:");
        console.error("Error message:", error.message);
        console.error("Error details:", error);

        return res.status(500).json({
            success: false,
            message: "üí• Gemini API kh√¥ng ho·∫°t ƒë·ªông",
            error: error.message,
            errorDetails: error.toString(),
            timestamp: new Date().toISOString()
        });
    }
});

// @desc    Chuy·ªÉn ƒë·ªïi ng√¥n ng·ªØ t·ª± nhi√™n sang SQL
// @route   POST /api/nlsql/translate
// @access  Public
const translateToSQL = asyncHandler(async (req, res) => {
    try {
        const { text } = req.body;
        console.log("üìù Received text for translation:", text);

        if (!text) {
            return res.status(400).json({
                success: false,
                message: "‚ùå Vui l√≤ng nh·∫≠p c√¢u h·ªèi"
            });
        }

        // T·∫°o prompt cho vi·ªác chuy·ªÉn ƒë·ªïi sang SQL
        const prompt = `
B·∫°n l√† m·ªôt chuy√™n gia SQL. H√£y chuy·ªÉn ƒë·ªïi c√¢u h·ªèi ti·∫øng Vi·ªát sau th√†nh c√¢u l·ªánh SQL chu·∫©n.

C√¢u h·ªèi: "${text}"

Quy t·∫Øc:
1. Ch·ªâ tr·∫£ v·ªÅ c√¢u l·ªánh SQL, kh√¥ng gi·∫£i th√≠ch
2. S·ª≠ d·ª•ng c√∫ ph√°p SQL chu·∫©n
3. Gi·∫£ s·ª≠ c√°c b·∫£ng c√≥ t√™n h·ª£p l√Ω (users, products, orders, etc.)
4. S·ª≠ d·ª•ng ti·∫øng Anh cho t√™n c·ªôt v√† b·∫£ng

SQL:`;

        const response = await ai.models.generateContent({
            model: "gemini-2.5-pro",
            contents: prompt
        });

        const sqlQuery = response.text || response;
        console.log("‚úÖ Generated SQL:", sqlQuery);

        return res.status(200).json({
            success: true,
            originalText: text,
            sqlQuery: sqlQuery,
            model: "gemini-2.5-pro",
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error("‚ùå Error in translateToSQL:", error);
        return res.status(500).json({
            success: false,
            message: "üí• L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu",
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

module.exports = {
    testGeminiConnection,
    translateToSQL
};