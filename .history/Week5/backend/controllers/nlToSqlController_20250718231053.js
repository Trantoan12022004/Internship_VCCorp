const asyncHandler = require("express-async-handler");
const dotenv = require("dotenv");
const axios = require("axios");
dotenv.config();

// S·ª≠ d·ª•ng API m·ªõi c·ªßa Google
const { GoogleGenAI } = require("@google/genai");

// Ki·ªÉm tra API key
if (!process.env.GEMINI_API_KEY) {
    console.error("‚ùå GEMINI_API_KEY kh√¥ng t·ªìn t·∫°i trong file .env!");
    process.exit(1);
}

console.log("‚úÖ API key found:", process.env.GEMINI_API_KEY.substring(0, 10) + "...");

// Kh·ªüi t·∫°o client
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
console.log("üöÄ Google GenAI client initialized");

// Danh s√°ch c√°c ch·ª©c nƒÉng c√≥ s·∫µn
const AVAILABLE_FUNCTIONS = [
    {
        endpoint: "/api/database/customers",
        method: "GET",
        description: "L·∫•y danh s√°ch kh√°ch h√†ng",
        keywords: ["kh√°ch h√†ng", "customer", "danh s√°ch kh√°ch h√†ng", "t·∫•t c·∫£ kh√°ch h√†ng", "kh√°ch"]
    },
    {
        endpoint: "/api/database/products/low-stock",
        method: "GET", 
        description: "S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng",
        keywords: ["s·∫Øp h·∫øt h√†ng", "t·ªìn kho th·∫•p", "low stock", "h·∫øt h√†ng", "t·ªìn kho", "s·∫£n ph·∫©m √≠t"]
    },
    {
        endpoint: "/api/database/revenue/by-category",
        method: "GET",
        description: "Doanh thu theo danh m·ª•c",
        keywords: ["doanh thu theo danh m·ª•c", "revenue category", "doanh thu danh m·ª•c", "thu nh·∫≠p danh m·ª•c"]
    },
    {
        endpoint: "/api/database/customers/top",
        method: "GET",
        description: "Top 5 kh√°ch h√†ng",
        keywords: ["top kh√°ch h√†ng", "kh√°ch h√†ng VIP", "kh√°ch h√†ng mua nhi·ªÅu", "top 5", "kh√°ch h√†ng t·ªët nh·∫•t"]
    },
    {
        endpoint: "/api/database/revenue/monthly",
        method: "GET",
        description: "Doanh thu theo th√°ng (nƒÉm 2025)",
        keywords: ["doanh thu th√°ng", "monthly revenue", "doanh thu theo th√°ng", "thu nh·∫≠p th√°ng", "2025"]
    },
    {
        endpoint: "/api/database/revenue/monthly/2024",
        method: "GET",
        description: "Doanh thu theo th√°ng nƒÉm 2024",
        keywords: ["doanh thu th√°ng 2024", "monthly revenue 2024", "doanh thu 2024", "2024"]
    },
    {
        endpoint: "/api/database/products/best-selling",
        method: "GET",
        description: "S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t",
        keywords: ["s·∫£n ph·∫©m b√°n ch·∫°y", "best selling", "b√°n ch·∫°y nh·∫•t", "s·∫£n ph·∫©m hot", "s·∫£n ph·∫©m ph·ªï bi·∫øn"]
    },
    {
        endpoint: "/api/database/orders/recent",
        method: "GET",
        description: "ƒê∆°n h√†ng g·∫ßn ƒë√¢y (7 ng√†y)",
        keywords: ["ƒë∆°n h√†ng g·∫ßn ƒë√¢y", "recent orders", "ƒë∆°n h√†ng m·ªõi", "7 ng√†y", "ƒë∆°n h√†ng tu·∫ßn"]
    },
    {
        endpoint: "/api/database/inventory/value-by-category",
        method: "GET",
        description: "Gi√° tr·ªã t·ªìn kho theo danh m·ª•c",
        keywords: ["gi√° tr·ªã t·ªìn kho", "inventory value", "t·ªìn kho danh m·ª•c", "gi√° tr·ªã h√†ng h√≥a"]
    },
    {
        endpoint: "/api/database/customers/inactive",
        method: "GET",
        description: "Kh√°ch h√†ng kh√¥ng ho·∫°t ƒë·ªông (30 ng√†y)",
        keywords: ["kh√°ch h√†ng kh√¥ng ho·∫°t ƒë·ªông", "inactive customers", "kh√°ch h√†ng c≈©", "30 ng√†y", "kh√°ch h√†ng im l·∫∑ng"]
    },
    {
        endpoint: "/api/database/sales/performance-by-city",
        method: "GET",
        description: "Hi·ªáu su·∫•t b√°n h√†ng theo th√†nh ph·ªë",
        keywords: ["hi·ªáu su·∫•t theo th√†nh ph·ªë", "sales by city", "b√°n h√†ng th√†nh ph·ªë", "performance city"]
    },
    {
        endpoint: "/api/database/reports/today",
        method: "GET",
        description: "B√°o c√°o kinh doanh h√¥m nay",
        keywords: ["b√°o c√°o h√¥m nay", "today report", "kinh doanh h√¥m nay", "h√¥m nay", "b√°o c√°o ng√†y"]
    }
];

// @desc    Test k·∫øt n·ªëi Gemini API
// @route   GET /api/nlsql/test
// @access  Public
const testGeminiConnection = asyncHandler(async (req, res) => {
    try {
        console.log("üîÑ Testing Gemini API connection...");
        
        const response = await ai.models.generateContent({
            model: "gemini-2.5-pro",
            contents: "t·∫°o m·ªôt c√¢u chuy·ªán d√†i kho·∫£ng 300 ch·ªØ"
        });

        console.log("‚úÖ Response received from Gemini");

        return res.status(200).json({
            success: true,
            message: "üéâ Gemini API ho·∫°t ƒë·ªông t·ªët!",
            response: response.text || response,
            model: "gemini-2.5-pro",
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error("‚ùå Gemini API test failed:", error);

        return res.status(500).json({
            success: false,
            message: "üí• Gemini API kh√¥ng ho·∫°t ƒë·ªông",
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// @desc    Ph√¢n t√≠ch y√™u c·∫ßu v√† g·ªçi API t∆∞∆°ng ·ª©ng
// @route   POST /api/nlsql/analyze
// @access  Public
const analyzeAndExecute = asyncHandler(async (req, res) => {
    try {
        const { text } = req.body;
        console.log("üìù Received request:", text);

        if (!text) {
            return res.status(400).json({
                success: false,
                message: "‚ùå Vui l√≤ng nh·∫≠p y√™u c·∫ßu"
            });
        }

        // T·∫°o prompt ƒë·ªÉ AI ph√¢n t√≠ch y√™u c·∫ßu
        const functionsText = AVAILABLE_FUNCTIONS.map((func, index) => 
            `${index + 1}. ${func.description} - ${func.endpoint}`
        ).join('\n');

        const prompt = `
B·∫°n l√† m·ªôt AI assistant chuy√™n ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† ch·ªçn API ph√π h·ª£p.

Danh s√°ch c√°c API c√≥ s·∫µn:
${functionsText}

Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng: "${text}"

H√£y ph√¢n t√≠ch y√™u c·∫ßu v√† tr·∫£ v·ªÅ ch·ªâ S·ªê TH·ª® T·ª∞ (1-12) c·ªßa API ph√π h·ª£p nh·∫•t. 
Ch·ªâ tr·∫£ v·ªÅ m·ªôt s·ªë duy nh·∫•t, kh√¥ng gi·∫£i th√≠ch g√¨ th√™m.

S·ªë th·ª© t·ª±:`;

        const response = await ai.models.generateContent({
            model: "gemini-2.5-pro",
            contents: prompt
        });

        const selectedNumber = parseInt((response.text || response).trim());
        console.log("ü§ñ AI selected function number:", selectedNumber);

        if (!selectedNumber || selectedNumber < 1 || selectedNumber > AVAILABLE_FUNCTIONS.length) {
            return res.status(400).json({
                success: false,
                message: "‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ch·ª©c nƒÉng ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n",
                originalText: text
            });
        }

        const selectedFunction = AVAILABLE_FUNCTIONS[selectedNumber - 1];
        console.log("üéØ Selected function:", selectedFunction);

        // G·ªçi API t∆∞∆°ng ·ª©ng
        const baseURL = process.env.API_BASE_URL || 'http://localhost:5000';
        const apiResponse = await axios.get(`${baseURL}${selectedFunction.endpoint}`);

        console.log("‚úÖ API call successful");

        return res.status(200).json({
            success: true,
            message: `üéâ ƒê√£ th·ª±c hi·ªán: ${selectedFunction.description}`,
            originalText: text,
            selectedFunction: {
                description: selectedFunction.description,
                endpoint: selectedFunction.endpoint
            },
            data: apiResponse.data,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error("‚ùå Error in analyzeAndExecute:", error);
        
        if (error.response) {
            // L·ªói t·ª´ API call
            return res.status(error.response.status).json({
                success: false,
                message: "üí• L·ªói khi g·ªçi API",
                error: error.response.data,
                timestamp: new Date().toISOString()
            });
        }

        return res.status(500).json({
            success: false,
            message: "üí• L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu",
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// @desc    Chuy·ªÉn ƒë·ªïi ng√¥n ng·ªØ t·ª± nhi√™n sang SQL (gi·ªØ l·∫°i function c≈©)
// @route   POST /api/nlsql/translate
// @access  Public
const translateToSQL = asyncHandler(async (req, res) => {
    try {
        const { text } = req.body;
        console.log("üìù Received text for translation:", text);

        if (!text) {
            return res.status(400).json({
                success: false,
                message: "‚ùå Vui l√≤ng nh·∫≠p c√¢u h·ªèi"
            });
        }

        const prompt = `
B·∫°n l√† m·ªôt chuy√™n gia SQL. H√£y chuy·ªÉn ƒë·ªïi c√¢u h·ªèi ti·∫øng Vi·ªát sau th√†nh c√¢u l·ªánh SQL chu·∫©n.

C√¢u h·ªèi: "${text}"

Quy t·∫Øc:
1. Ch·ªâ tr·∫£ v·ªÅ c√¢u l·ªánh SQL, kh√¥ng gi·∫£i th√≠ch
2. S·ª≠ d·ª•ng c√∫ ph√°p SQL chu·∫©n
3. Gi·∫£ s·ª≠ c√°c b·∫£ng c√≥ t√™n h·ª£p l√Ω (users, products, orders, etc.)
4. S·ª≠ d·ª•ng ti·∫øng Anh cho t√™n c·ªôt v√† b·∫£ng

SQL:`;

        const response = await ai.models.generateContent({
            model: "gemini-2.5-pro",
            contents: prompt
        });

        const sqlQuery = response.text || response;
        console.log("‚úÖ Generated SQL:", sqlQuery);

        return res.status(200).json({
            success: true,
            originalText: text,
            sqlQuery: sqlQuery,
            model: "gemini-2.5-pro",
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error("‚ùå Error in translateToSQL:", error);
        return res.status(500).json({
            success: false,
            message: "üí• L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu",
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});
const chatWithGemini = asyncHandler(async (req, res) => {
    try {
        const { question } = req.body;
        if (!question || typeof question !== "string" || !question.trim()) {
            return res.status(400).json({
                success: false,
                message: "‚ùå Vui l√≤ng nh·∫≠p c√¢u h·ªèi h·ª£p l·ªá!",
                timestamp: new Date().toISOString()
            });
        }

        console.log("üí¨ User question:", question);

        const response = await ai.models.generateContent({
            model: "gemini-2.5-pro",
            contents: question
        });

        console.log("‚úÖ AI response:", response.text || response);

        return res.status(200).json({
            success: true,
            question,
            answer: response.text || response,
            model: "gemini-2.5-pro",
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error("‚ùå Gemini chat failed:", error);

        return res.status(500).json({
            success: false,
            message: "üí• ƒê√£ x·∫£y ra l·ªói khi h·ªèi ƒë√°p v·ªõi AI",
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});
module.exports = {
    testGeminiConnection,
    analyzeAndExecute,
    translateToSQL,
    
};